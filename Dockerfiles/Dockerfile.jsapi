# first stage
FROM registry.access.redhat.com/ubi9/nodejs-18 as builder

# use privilaged user
USER root 

# install Java
RUN curl -k https://download.oracle.com/java/20/latest/jdk-20_linux-x64_bin.tar.gz -o /tmp/java-package.tar.gz \
    && tar xvzf /tmp/java-package.tar.gz -C /usr/

# install Maven package manager
RUN curl -k https://dlcdn.apache.org/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.tar.gz -o /tmp/maven-package.tar.gz \
    && tar xvzf /tmp/maven-package.tar.gz -C /usr/

# install go package manager and jq JSON formating tool
RUN yum install -y \
    golang \
    jq \
    && yum clean all
    
# install crda javascript API
COPY configs/.npmrc .
RUN npm install --global @RHEcosystemAppEng/crda-javascript-api

# add crda script
COPY scripts/jsapi/crda.sh /

# assign executable permissions to all installed binaries
RUN chmod +x /usr/jdk-20.0.1/bin/java \
    && chmod +x /usr/apache-maven-3.9.3/bin/mvn \
    && chmod +x /usr/bin/go \
    && chmod +x /usr/bin/jq \
    && chmod +x /opt/app-root/src/.npm-global/bin/crda-javascript-api \
    && chmod +x /crda.sh 

#second stage
FROM registry.access.redhat.com/ubi9/nodejs-18-minimal

LABEL org.opencontainers.image.source https://github.com/fabric8-analytics/crda-images

# assign token for crda authentication with Snyk provider
ENV CRDA_SNYK_TOKEN=''

# Copy java executable from the builder stage
COPY --from=builder /usr/jdk-20.0.1/ /usr/jdk-20.0.1/
ENV JAVA_HOME=/usr/jdk-20.0.1/

# Copy maven executable from the builder stage
COPY --from=builder /usr/apache-maven-3.9.3 /usr/apache-maven-3.9.3
ENV MAVEN_HOME=/usr/apache-maven-3.9.3

# Update PATH
ENV PATH=$PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin

# Copy golang executable from the builder stage
COPY --from=builder /usr/bin/go /usr/bin/go
COPY --from=builder /usr/lib/golang /usr/lib/golang

# Copy jq executable from the builder stage
COPY --from=builder /usr/bin/jq /usr/bin/jq
COPY --from=builder /usr/lib64/libjq.so.1 /usr/lib64/libjq.so.1
COPY --from=builder /usr/lib64/libonig.so.5 /usr/lib64/libonig.so.5

# Copy crda-javascript-api executable from the builder stage
COPY --from=builder /opt/app-root/src/ /opt/app-root/src/

# Copy crda executable script from the builder stage
COPY --from=builder /crda.sh /crda.sh